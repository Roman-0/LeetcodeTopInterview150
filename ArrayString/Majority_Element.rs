//Roman Olsen
//Leetcode top 150
//169 Majority Element
//Decriptions Generated by ChatGPT 3.5

impl Solution {
    pub fn majority_element(nums: Vec<i32>) -> i32 {
        let mut sorted_nums = nums.clone();
        sorted_nums.sort();
        sorted_nums[(nums.len() / 2) as usize]
    }
}
/*
This implementation sorts the input vector and returns the element at the middle.
has a time complexity of O(n log n) due to the sorting.
*/

impl Solution {
    pub fn majority_element(nums: Vec<i32>) -> i32 {
        let mut hashmap = HashMap::new();

        for &element in &nums {
            let count = hashmap.entry(element).or_insert(0);
            *count += 1;

            if *count > nums.len() / 2 {
                return element;
            }
        }
        return 0;
    }
}
/*
This implementation uses a HashMap to count the occurrences of each element.
It returns the element with a count greater than half the length of the vector.
This solution has a time complexity of O(n).
*/
